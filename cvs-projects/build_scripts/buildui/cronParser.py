#!/user/bin/env python
import re,cronJob
import os


def readline(fp):
	return fp.readline().replace('\t',' ').replace('\n','')

class cronParser:

	def __init__(self, user='Invalid'):
		jobID = 0
		reGroup       = re.compile(r'''#<Group.*name="(.*)".*>''')
		reJob         = re.compile(r'''#<Job.*comment="(.*)".*>''')
		reActiveJob   = re.compile(r'''(.*?) (.*?) (.*?) (.*?) (.*?) (.*?$)''')
		reInactiveJob = re.compile(r'''#(.*?) (.*?) (.*?) (.*?) (.*?) (.*?$)''')


		os.system('''sudo rm /tmp/crontab.out''')
		os.system('''sudo ssh -l build overlord.borg 'crontab -l' > /tmp/crontab.out''')
		cronFile = open('/tmp/crontab.out')
		self.cronGroups = {}
		currentGroup = 'Ungrouped'
		currentComment = None

		currentLine = ''
		while currentLine != '#<Begin>':
			currentLine = readline(cronFile)


		while currentLine != '#<End>':
			currentLine = readline(cronFile)
			groupMatch = reGroup.match(currentLine)
			jobMatch   = reJob.match(currentLine)
			activeJob = reActiveJob.match(currentLine)
			inactiveJob = reInactiveJob.match(currentLine)
			if groupMatch:
				currentGroup = groupMatch.group(1)
			elif jobMatch:
				currentComment = jobMatch.group(1)
			elif inactiveJob:
				jobToAdd = cronJob.cronJob(inactiveJob.group(1), inactiveJob.group(2), inactiveJob.group(3), inactiveJob.group(4), inactiveJob.group(5), inactiveJob.group(6).split(';'),'N', user)
				jobToAdd.setID(jobID)
				jobID += 1
				if currentComment:
					jobToAdd.addComment(currentComment)
				try:
					self.cronGroups[currentGroup].append(jobToAdd)
				except KeyError:
					self.cronGroups[currentGroup] = [jobToAdd]
				currentcomment = None
			elif activeJob:
				jobToAdd = cronJob.cronJob(activeJob.group(1), activeJob.group(2), activeJob.group(3), activeJob.group(4), activeJob.group(5), activeJob.group(6).split(';'),'Y', user)
				jobToAdd.setID(jobID)
				jobID += 1
				if currentComment:
					jobToAdd.addComment(currentComment)
				try:
					self.cronGroups[currentGroup].append(jobToAdd)
				except KeyError:
					self.cronGroups[currentGroup] = [jobToAdd]
				currentComment = None
			elif currentLine == '#</Group>':
				currentGroup = 'Ungrouped'

	def getNewID(self):
		id = 0
		for group in self.getGroups():
			for job in self.getJobs(group):
				if job.ID > id:
					id = job.ID

		return id+1


	def getGroups(self):
		groups = self.cronGroups.keys()
		groups.sort()
		return groups

	def getJobs(self,key):
		return self.cronGroups[key]

	def getJobByID(self,ID):
		for group in self.getGroups():
			for job in self.getJobs(group):
				if job.ID == int(ID):
					return job

		return None

	def addGroup(self,group):
		try:
			tmp = self.cronGroups[group]
		except KeyError:
			self.cronGroups[group] = []

	def deleteGroup(self,group):
		try:
			del self.cronGroups[group]
		except KeyError:
			pass

	def addJobToGroup(self, newJob, group):
		'''Given a job and a group, add job to said group, in order by ID'''
		try:
			jobList = self.cronGroups[group]
		except KeyError:
			self.cronGroups[group] = []
			jobList = self.cronGroups[group]
		newlist = []
		isAdded = False

		for oldJob in jobList:
			if isAdded:
				newlist.append(oldJob)
			elif newJob.ID < oldJob.ID:
				newlist.append(newJob)
				newlist.append(oldJob)
				isAdded = True
			else:
				newlist.append(oldJob)

		if not isAdded:
			newlist.append(newJob)

		self.cronGroups[group] = newlist

		

	def removeJobByID(self,ID):

		for group in self.getGroups():
			for i in range(len(self.cronGroups[group])):
				if self.cronGroups[group][i].ID == int(ID):
					del self.cronGroups[group][i]
					break
		

	def outputToFile(self):
		fp = open('/tmp/crontab.new','w')

		fp.write('''





#
#		DO NOT EDIT THIS FILE BY HAND.  DONT DO IT.  SERIOUSLY!
#






#<Begin>
#<Env>
MAILTO=build@mvista.com
SHELL=/bin/bash
PATH=/usr/local/bin:/usr/bin:/usr/X11R6/bin:/bin:/usr/openwin/bin:/sbin:/usr/sbin:/home/build/bin:/home/build/bin/utils
CVS_RSH=ssh
PYTHONPATH=/home/build/build_scripts/rpmlint/rpmlint-0.9.1-mv/:/home/build/bin/resourceManager/:/home/build/bin/common:/home/build/bin/utils
LM_LICENSE_FILE=27000@glue
#</Env>

''')


		
		for group in self.getGroups():
			fp.write('#<Group name="%s">\n' % group)
			
			for job in self.getJobs(group):
				if job.hasComment():
					fp.write('#<Job comment="%s">\n' % job.comments[0])
				fp.write(job.outputCron() + '\n')
				if job.hasComment():
					fp.write('#</Job>\n')
			
			fp.write('#</Group>\n\n')
		
		fp.write('#<End>')		
		fp.close()


