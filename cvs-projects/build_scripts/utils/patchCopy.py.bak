#!/usr/bin/python

import os, sys, re, shutil

repoHome = '/home/build/kernel-patches/CVSREPOS'


class product:
  def __init__(self, name, location, version):
    self.name = name
    self.location = location
    self.version = version
    return

products = {
	  'bartholome': product('mvlcge30','/mvista/dev_area/cge/mvlcge3	10-updates/patches',2),
          'campbell':   product('mvlcge21','/mvista/dev_area/cge/mvlcge2.1.0-updates/patches',2),
          'druid_peak': product('mvlcge31','/mvista/dev_area/cge/mvlcge310-updates/patches', 3),
          'humboldt':   product('mvl31','/mvista/dev_area/pro/mvl310-updates/patches', 3),
          'kapalua':    product('mvlcee31','/mvista/dev_area/cee/mvlcee310-updates/patches', 3),
          'patagonia':  product('mvl401','/mvista/dev_area/pro/mvl401-updates/patches',4),
          'lamar':      product('mvlcge401','/mvista/dev_area/pro/mvl401-updates/patches', 4),
          'makena':     product('mobilinux402','/mvista/dev_area/mobilinux/mobilinux400-updates/patches', 4)
          }


def updateErrata():
  print "Generating new README.errata"
  os.system("for a in $(ls *.mvlpatch);do echo $a; head -n 150 $a >fileout_$a;awk '/^# /' fileout_$a; done >README")
  os.system("rm -f fileout_*")
  os.system("grep -v Signed README > README.errata")
  os.system("rm -f README")
  return

#This just copies files
def doPatch(productInfo, patchName):
  print "Copying %s to %s"%(patchName, productInfo.location)
  shutil.copy(patchName, productInfo.location)
  return

def doPatchFourPointOh(productInfo, patchName):
  doPatch(productInfo, patchName)
  updateErrata()
  return

def main(argv):
  if len(argv) != 3:
    print "Usage: <bug> <patch>"
    sys.exit(1)
  bugNum = argv[1]
  patchName = argv[2]
  findBranch = re.compile(r'(\w+)_patches')
  for dir in os.listdir(repoHome):
    print "Checking branch: %s"%dir
    branch = findBranch.match(dir).group(1)
    os.chdir(os.path.join(repoHome,dir))
    os.system('cvs update')
    if os.path.exists(patchName): #So, we just run this on all the stuff, if the patch doesn't exist we just move along
      os.system('cvs tag %s-kp-%s %s'%(products[branch].name,bugNum,patchName))
      if products[branch].version >= 4:
        doPatchFourPointOh(products[branch], patchName)
      else:
        doPatch(products[branch], patchName)






if __name__ == "__main__":
  main(sys.argv)


