#!/usr/bin/python2

import sys, os, string, re
from manifestVerify import validateManifest
from updateLib import *

if len(sys.argv) == 1:
  print 'usage: %s %s %s %s %s %s ' % (sys.argv[0],'<app>','<apptype>','<bug>','<product>','<build_id>')
  sys.exit(1)

app = sys.argv[1]
apptype = sys.argv[2]
bug = sys.argv[3]
#runtype = sys.argv[4]
product = sys.argv[4]
id = sys.argv[5]
cd = os.getcwd()

def updateManifest(dir, dirname):
  os.chdir('/mvista/arch/%s/updates'%(dir))
  print "Updating Manifest.xml..."
  os.system('/mvista/arch/updateManifest.py %s package'%(dirname))


if product == 'all31':
  if apptype == 'foundation':
    cpfrom = '/mvista/dev_area/foundation/foundation_one-updates'
  dirs = 	{
	'mvl3.1-arm':				[['arm_720t_le','arm_v4t_le'],
						 ['mandrake91','redhat73','redhat90','solaris7','suse90','windows2000']],

	'mvl3.1-mips':				[['mips_fp_be','mips_fp_le','mips_nfp_le'],
						 ['mandrake91','redhat73','redhat90','solaris7','suse90','windows2000']],

	'mvl3.1-ppc':				[['ppc_405','ppc_74xx','ppc_7xx','ppc_82xx','ppc_8xx','ppc_440','ppc_440ep','ppc_85xx',],
						 ['mandrake91','redhat73','redhat90','solaris7','suse90','windows2000']],

	'mvl3.1-sh':				[['sh_sh3_be','sh_sh3_le','sh_sh4_be','sh_sh4_le'],
						 ['mandrake91','redhat73','redhat90','solaris7','suse90','windows2000']],

	'mvl3.1-strngarm':			[['arm_sa_le','arm_xscale_be','arm_xscale_le'],
						 ['mandrake91','redhat73','redhat90','solaris7','suse90','windows2000']],

	'mvl3.1-x86':				[['x86_486','x86_586','x86_crusoe','x86_pentium2','x86_pentium3','x86_pentium4'],
						 ['mandrake91','redhat73','redhat90','solaris7','suse90','windows2000']],

#	'mvl3.1-xtensa':		        [['xtensa_linux_le','xtensa_linux_be'],
#						 ['mandrake91','redhat73','redhat90','solaris7','suse90','windows2000']],

	'mvlcge3.1-x86':			[['x86_pentium2','x86_pentium3','x86_pentium4'],
						 ['redhat73','redhat80','redhat90','solaris7']],

	'mvlcge3.1-ppc':			[['ppc_440','ppc_7xx','ppc_74xx','ppc_82xx',],
						 ['redhat73','redhat80','redhat90','solaris7']],

	'mvlcge3.1-strngarm':			[['arm_xscale_be',],
						 ['redhat73','redhat80','redhat90','solaris7']],

	'mvlcee3.1-ti-omap16xx_gsm_gprs':	[['arm_v4t_le',],
						 ['redhat73','redhat90','windows2000']],

	'mvlcee3.1-hitachi-ms7300cp01':		[['sh_sh3_le',],
						 ['redhat73','redhat90','windows2000']],

	'mvlcee3.1-ti-omap-730_gsm_gprs':	[['arm_v4t_le',],
						 ['redhat73','redhat90','windows2000']],

	'mvlcee3.1-intel-mainstone-pxa27x':	[['arm_iwmmxt_le',],
						 ['redhat73','redhat90','windows2000']],

	'mvlcee3.1-motorola-mx21ads':		[['arm_v4t_le',],
						 ['redhat73','redhat90','windows2000']],

	'mvlcee3.1-hitachi-ms73180cp01':	[['sh_sh3_le',],
						 ['redhat73','redhat90','windows2000']],

	'mvlcee3.1-ti-omap2420_gsm_gprs':	[['arm_v5t_le',],
						 ['redhat73','redhat90','windows2000']],

	'mvlcee3.1-ti-omap2430_sdp': 		[['arm_v5t_le',],
						 ['redhat73','redhat90','windows2000']],
        'mvlcee3.1-samsung-24a0':		[['arm_v4t_le',],
						 ['redhat73','redhat90','windows2000']]
		}

elif product == 'mvl31special':
  cpfrom = '/mvista/dev_area/foundation/foundation_one-updates'
  dirs =        {
        'mvl3.1-ppc':                           [['ppc_440ep','ppc_85xx'],
                                                 ['mandrake91','redhat73','redhat90','solaris7','suse90','windows2000']]
               }
elif product == 'mvl31-64':
  cpfrom = '/mvista/dev_area/foundation/foundation_one64-updates'
  dirs =      {
        'mvl3.1-mips':                          [['mips64_fp_be'],
                                                 ['redhat73','redhat90','solaris7','suse90','windows2000']],
        'mvlcge3.1-em64t':                      [['x86_em64t'],
                                                 ['redhat73','redhat80','redhat90','solaris7']],
        'mvlcge3.1-amd64':                      [['x86_amd64'],
                                                 ['redhat73','redhat80','redhat90','solaris7']]
             }

elif product == 'mvlcge31':
  cpfrom = '/mvista/dev_area/cge/mvlcge310-updates'
  dirs =      {
	'mvlcge3.1-x86':			[['x86_pentium2','x86_pentium3','x86_pentium4'],
						 ['redhat73','redhat80','redhat90','solaris7']],

	'mvlcge3.1-ppc':			[['ppc_440','ppc_7xx','ppc_74xx','ppc_82xx',],
						 ['redhat73','redhat80','redhat90','solaris7']],

	'mvlcge3.1-strngarm':			[['arm_xscale_be',],
						 ['redhat73','redhat80','redhat90','solaris7']]
	}
elif product == 'mvlcge31-rutile':
  cpfrom = '/mvista/dev_area/cge/mvlcge310_em64t-updates'
  dirs =      {
        'mvlcge3.1-em64t':                      [['x86_em64t'],
                                                 ['redhat73','redhat80','redhat90','solaris7']]
	}
elif product == 'mvlcge31-netra':
  cpfrom = '/mvista/dev_area/cge/mvlcge310_amd64-updates'
  dirs =      {
        'mvlcge3.1-amd64':                      [['x86_amd64'],
                                                 ['redhat73','redhat80','redhat90','solaris7']]
             }
elif product == 'cge401':
  cpfrom = '/mvista/dev_area/cge/mvlcge401-updates'
  dirs =        {
         'mvlcge4.0.1-x86':        	[['x86_pentium3','x86_pentium4'],
					 ['redhat90','solaris8']],

         'mvlcge4.0.1-ppc700':           [['ppc_7xx',],
                                         ['redhat90','solaris8']],
         
         'mvlcge4.0.1-ppc7400':          [['ppc_74xx',],
                                         ['redhat90','solaris8']],

         'mvlcge4.0.1-ppc900':           [['ppc_9xx',],
                                         ['redhat90','solaris8']],

         'mvlcge4.0.1-em64t':           [['x86_em64t',],
                                         ['redhat90','solaris8']],

         'mvlcge4.0.1-ppc85xx':           [['ppc_85xx',],
                                         ['redhat90','solaris8']],

         'mvlcge4.0.1-ppc440':           [['ppc_440',],
                                         ['redhat90','solaris8']],

         'mvlcge4.0.1-amd64':           [['x86_amd64',],
                                         ['redhat90','solaris8']],
	}

elif product == 'compat31':
  cpfrom = '/mvista/dev_area/foundation/foundation_one-updates'
  dirs =        {
	'mvl3.1-x86':				[['x86_486','x86_586','x86_crusoe','x86_pentium2','x86_pentium3','x86_pentium4'],
						 ['mandrake91','redhat73','redhat90','solaris7','suse90','windows2000']],

	'mvlcge3.1-x86':			[['x86_pentium2','x86_pentium3','x86_pentium4'],
						 ['redhat73','redhat80','redhat90','solaris7']],
               }
elif product == 'compat31_64':
  cpfrom = '/mvista/dev_area/foundation/foundation_one64-updates'
  dirs =        {
        'mvlcge3.1-em64t':                      [['x86_em64t'],
                                                 ['redhat73','redhat80','redhat90','solaris7']],
        'mvlcge3.1-amd64':                      [['x86_amd64'],
                                                 ['redhat73','redhat80','redhat90','solaris7']]
               }
elif product == 'all40':
  cpfrom = '/mvista/dev_area/foundation/foundation_two-updates'
  dirs = {
         'mvl4.0.1-x86':           	[['x86_586','x86_pentium3'],
    			 		['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-powerpc400':        	[['ppc_440','ppc_440ep','ppc_405'],
                                         ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-powerpc700':        	[['ppc_7xx',],
                                         ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-powerpc7400':       	[['ppc_74xx',],
                                         ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-xscale':        	[['arm_xscale_be',],
                                        ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-armv5':         	[['arm_v5t_le',],
                                        ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-arm_iwmmxt2_le':     [['arm_iwmmxt2_le',],
                                        ['redhat90','suse90','windows2000','solaris8']],

         'mvl4.0.1-ti-davinci_evm':     [['arm_v5t_le',],
                                        ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-mipsfp':        	[['mips2_fp_be', 'mips2_fp_le',],
                                        ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-mips_vr4133':       	[['mips_vr4133_be', 'mips_vr4133_le',],
                                        ['redhat90','suse90','solaris8','windows2000']],

        'mvl4.0.1-mipsnfp':        	[['mips2_nfp_le',],
                                       ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-powerpc64':         	[['ppc_9xx',],
                                        ['redhat90','suse90','solaris8','windows2000']],

       'mvl4.0.1-mips64fp':		[['mips64_fp_be',],
					 ['redhat90','solaris8','suse90','windows2000']],

         'mvl4.0.1-mips64_octeon':	[['mips64_octeon_be',],
					 ['redhat90','solaris8','suse90','windows2000']],

	 'mvl4.0.1-powerquiccii':	[['ppc_82xx',],
					 ['redhat90','solaris8','suse90','windows2000']],

	 'mvl4.0.1-powerquicci':	[['ppc_8xx',],
					 ['redhat90','solaris8','suse90','windows2000']],

	 'mvl4.0.1-powerquicciii':	[['ppc_85xx',],
					 ['redhat90','solaris8','suse90','windows2000']],
	 
	 'mvl4.0.1-xtensa':		[['xtensa_linux_le'],
					 ['redhat90','solaris8','suse90','windows2000']],
	 
	 'mvl4.0.1-sh4le':		[['sh_sh4_le'],
					 ['redhat90','solaris8','suse90','windows2000']],

	 'mvl4.0.1-powerquiccii-pro':	[['ppc_83xx_nfp',],
					 ['redhat90','solaris8','suse90','windows2000']],
	 
         'mvlcge4.0.1-x86':        	[['x86_pentium3','x86_pentium4'],
					 ['redhat90','solaris8']],

         'mvlcge4.0.1-ppc700':           [['ppc_7xx',],
                                         ['redhat90','solaris8']],
         
         'mvlcge4.0.1-ppc7400':          [['ppc_74xx',],
                                         ['redhat90','solaris8']],

         'mvlcge4.0.1-ppc900':           [['ppc_9xx',],
                                         ['redhat90','solaris8']],

         'mvlcge4.0.1-em64t':           [['x86_em64t',],
                                         ['redhat90','solaris8']],

         'mvlcge4.0.1-ppc85xx':           [['ppc_85xx',],
                                         ['redhat90','solaris8']],

         'mvlcge4.0.1-ppc440':           [['ppc_440',],
                                         ['redhat90','solaris8']],

         'mvlcge4.0.1-amd64':           [['x86_amd64',],
                                         ['redhat90','solaris8']],

         'mobilinux4.0.2-arm_iwmmxt':    [['arm_iwmmxt_le',],
					 ['redhat90','suse90','windows2000']],

         'mobilinux4.0.2-armv6':         [['arm_v6_vfp_le',],
                                         ['redhat90','suse90','windows2000']],

         'mobilinux4.0.2-armv5':         [['arm_v5t_le',],
                                         ['redhat90','suse90','windows2000']],

         'mobilinux4.0.2-philips_armv5': [['arm_v5t_le',],
                                         ['redhat90','suse90','windows2000']],

         'mobilinux4.1.0-arm_iwmmxt':    [['arm_iwmmxt_le','arm_iwmmxt_le_uclibc',],
                                         ['redhat90','suse90','windows2000']],

         'mobilinux4.1.0-arm_iwmmxt2_le':    [['arm_iwmmxt2_le','arm_iwmmxt2_le_uclibc',],
                                         ['redhat90','suse90','windows2000']],

         'mobilinux4.1.0-armv6':         [['arm_v6_vfp_le','arm_v6_vfp_le_uclibc',],
                                         ['redhat90','suse90','windows2000']],

         'mobilinux4.1.0-ti-omap2430_sdp':         [['arm_v6_vfp_le','arm_v6_vfp_le_uclibc',],
                                         ['redhat90','suse90','windows2000']]
}
elif product == 'pro401':
  cpfrom = '/mvista/dev_area/pro/mvl401-updates'
  dirs = {
         'mvl4.0.1-x86':           	[['x86_586','x86_pentium3'],
    			 		['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-powerpc400':        	[['ppc_440','ppc_440ep','ppc_405'],
                                         ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-powerpc700':        	[['ppc_7xx',],
                                         ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-powerpc7400':       	[['ppc_74xx',],
                                         ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-xscale':        	[['arm_xscale_be',],
                                        ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-armv5':         	[['arm_v5t_le',],
                                        ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-arm_iwmmxt2_le':     [['arm_iwmmxt2_le',],
                                        ['redhat90','suse90','windows2000','solaris8']],

         'mvl4.0.1-ti-davinci_evm':     [['arm_v5t_le',],
                                        ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-mipsfp':        	[['mips2_fp_be', 'mips2_fp_le',],
                                        ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-mips_vr4133':       	[['mips_vr4133_be', 'mips_vr4133_le',],
                                        ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-mipsnfp':        	[['mips2_nfp_le',],
                                        ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-powerpc64':         	[['ppc_9xx',],
                                        ['redhat90','suse90','solaris8','windows2000']],

         'mvl4.0.1-mips64fp':		[['mips64_fp_be',],
					 ['redhat90','solaris8','suse90','windows2000']],

         'mvl4.0.1-mips64_octeon':	[['mips64_octeon_be',],
					 ['redhat90','solaris8','suse90','windows2000']],

	 'mvl4.0.1-powerquiccii':	[['ppc_82xx',],
					 ['redhat90','solaris8','suse90','windows2000']],

	 'mvl4.0.1-powerquicci':	[['ppc_8xx',],
					 ['redhat90','solaris8','suse90','windows2000']],

	 'mvl4.0.1-powerquicciii':	[['ppc_85xx',],
					 ['redhat90','solaris8','suse90','windows2000']],
	 
	 'mvl4.0.1-xtensa':		[['xtensa_linux_le'],
					 ['redhat90','solaris8','suse90','windows2000']],
	 
	 'mvl4.0.1-sh4le':		[['sh_sh4_le'],
					 ['redhat90','solaris8','suse90','windows2000']],

	 'mvl4.0.1-powerquiccii-pro':	[['ppc_83xx_nfp',],
					 ['redhat90','solaris8','suse90','windows2000']],
	 
	}
elif product == 'makena':
  cpfrom = '/mvista/dev_area/mobilinux/mobilinux400-updates'
  dirs = {
         'mobilinux4.0.2-arm_iwmmxt':    [['arm_iwmmxt_le',],
					 ['redhat90','suse90','windows2000']],

         'mobilinux4.0.2-armv6':         [['arm_v6_vfp_le',],
                                         ['redhat90','suse90','windows2000']],

         'mobilinux4.0.2-armv5':         [['arm_v5t_le',],
                                         ['redhat90','suse90','windows2000']],

         'mobilinux4.0.2-philips_armv5': [['arm_v5t_le',],
                                         ['redhat90','suse90','windows2000']]
 }
elif product == 'mbl410':
  cpfrom = '/mvista/dev_area/mobilinux/mobilinux410-updates'
  dirs = {
         'mobilinux4.1.0-arm_iwmmxt':    [['arm_iwmmxt_le','arm_iwmmxt_le_uclibc',],
                                         ['redhat90','suse90','windows2000']],

         'mobilinux4.1.0-arm_iwmmxt2_le':    [['arm_iwmmxt2_le','arm_iwmmxt2_le_uclibc',],
                                         ['redhat90','suse90','windows2000']],

         'mobilinux4.1.0-armv6':         [['arm_v6_vfp_le','arm_v6_vfp_le_uclibc',],
                                         ['redhat90','suse90','windows2000']],

         'mobilinux4.1.0-ti-omap2430_sdp':         [['arm_v6_vfp_le','arm_v6_vfp_le_uclibc',],
                                         ['redhat90','suse90','windows2000']]
}
else:
  print "Invalid product selection"
  sys.exit(1)

dirname = ''
dirnames = []
runtypes = []
updateDir = '%s/%s-%s-%s'%(cpfrom,app,bug,id)

apptype = string.split(app,'.')[0]

### Everything below being replace by getJobLib()
os.chdir('%s/SRPMS' %(updateDir))
rpmname = os.popen('ls *%s*' % (apptype)).readlines()
os.system('clear')
runtype = "copy"
i = 0
crossOnly = 0
while(i < len(rpmname)):
  if(string.count(rpmname[i],'cross')):
#    rpmname.remove(rpmname[i])
    runtype = "crosscopy"
#    i = i - 1
  elif(string.count(rpmname[i],'host-tool')):
    runtype = "host-toolcopy"
  elif(string.count(rpmname[i],'host') or string.count(rpmname[i],'common')):
    runtype = "hostcopy"
  i = i + 1

#getJobList(updateDir, runtypes, apptype)

####################

#### Below being replaced by selectDirName

os.chdir('%s/SRPMS' % (updateDir))
i = 0
for d in rpmname:
  dirnames.append( string.replace(string.replace(string.strip(d),'hhl-'+apptype+'-',''),'.src.rpm','') )
  print '%s. dirname = %s'%(i,dirnames[i])
  i = i + 1

print "%s. Cancel Upload"%(i)
print "Runtype = %s"%(runtype)
if runtype == 'crosscopy' and i == 1:
  crossOnly = 1

#no more cross only using the new method for updates
print "crossonly = %s"%(crossOnly)

#print runtypes


def getDirname():
  try:
    x = input("Please choose the Directory Name: ")
  except SyntaxError:
    print "Bad Syntax"
    sys.exit(1)
  except:
    print "Unknown Error"
    sys.exit(1)
  return x

choiceNum = getDirname()

while( choiceNum > i ):
  print "Invalid Entry"
  choiceNum = getDirname()

if (choiceNum == i):
  print "Bye!"
  sys.exit(1)
else:
  dirname = dirnames[choiceNum]

os.chdir(cd)

#We have dirname, we're gonna grab the version of it so we only copy files that have the same versioning as what we've chosen

version = getVersion(dirname)
print version
#sys.exit(1)

try:
  outputFile = open(id,"a")
except IOError:
  print "Can't open file for writing"
  sys.exit(1)

outputFile.write("\n")


keys = dirs.keys()
keys.sort()
if runtype == 'crosscopy' and os.path.exists('%s/%s/cross/common'%(updateDir,dirs[keys[0]][0][0])):
  runtype = 'crosscommon'
  print "This is Cross Common"
  raw_input("Hit Enter to Continue")

choice = 0

#replaced by pickhost
#if 'crosscopy' or 'hostcopy':
#	hostype = pickHost()
#	if hosttype != none:
#		onehost = 1
#	else:
#		onehost = 0

if runtype == 'crosscopy' and crossOnly == 1:
    pickone = raw_input("Would you like cross copy for single host?[y/N]:  ") 
    if pickone in ('y','Y'):
      runtype = 'cross_onehost'
      print "1. windows2000"
      print "2. solaris8"
      try:
        choice = input("Enter Selection:")
        if choice == 1:
          hosttype = 'windows2000'
        elif choice == 2:
          hosttype = 'solaris8'
        else:
          print "Error, dying...."
          sys.exit(1)
      except:
        print "You hit a bad button"
        sys.exit(1)


if runtype == 'hostcopy':
   pickone = raw_input("Would you like host copy for single host?[y/N]:  ")
   if pickone in ('y','Y'):
      runtype = 'host_onehost'
      print "1. windows2000"
      print "2. solaris8"
      try:
        choice = input("Enter Selection:")
        if choice == 1:
          hosttype = 'windows2000'
        elif choice == 2:
          hosttype = 'solaris8'
        else:
          print "Error, dying...."
          sys.exit(1)
      except:
        print "You hit a bad button"
        sys.exit(1)
######################

for dir in keys:
  

  if runtype == 'remove':
    os.chdir('/mvista/arch/%s/updates'%(dir))
    if(os.path.exists(dirname)):
      print "Deleting %s from %s"%(dirname,dir)
      os.system('rm -rf %s'%(dirname))

  elif runtype == 'copy':
    print "Copying %s"%(dir)
    doCopy = 0
    #This for loop checks to see if any of the archs actually have something in them
    #We don't want to make empty directories if there's nothing to copy
    for subd in dirs[dir][0]:
      if len(os.listdir('%s/%s/target'%(updateDir,subd))) > 0:
        doCopy = 1
    if(doCopy):
      os.chdir('/mvista/arch/%s/updates' % (dir))
      os.system('mkdir -p %s' % (dirname))
      os.chdir(dirname)
      os.system('mkdir -p SRPMS ' )
      os.system('cp -a %s/SRPMS/*%s* SRPMS/' % (updateDir,version))
      for subd in dirs[dir][0]:
        os.system('cp -a %s/%s .' % (updateDir,subd))
      updateManifest(dir, dirname)
      validateManifest()
      outputFile.write("%s -> %s\n"%(dir,dirname))

  elif runtype == 'crosscopy':
    os.chdir('/mvista/arch/%s/updates' % (dir))
    print 'making %s in %s/updates...' % (dirname,dir)
    os.system('mkdir -p %s' % (dirname))
    os.chdir(dirname)
    print 'Currently in %s...' % (dir)
    os.system('mkdir -p SRPMS' )
    os.system('cp -a %s/%s-%s-%s/SRPMS/*%s* SRPMS/' % (cpfrom,app,bug,id,version))
    for subd in dirs[dir][0]:
      os.system('mkdir -p %s/cross' % (subd))
      if not crossOnly:
        os.system('cp -a %s/%s-%s-%s/%s/target ./%s/' % (cpfrom,app,bug,id,subd,subd))
      for subh in dirs[dir][1]:
        if len(os.listdir('%s/%s-%s-%s/%s/cross/%s'%(cpfrom,app,bug,id,subd,subh))) > 0: #don't copy empty host dirs i.e. no prelink in windows
          os.system('cp -a %s/%s-%s-%s/%s/cross/%s ./%s/cross/' % (cpfrom,app,bug,id,subd,subh,subd))
    updateManifest(dir, dirname)  
    validateManifest()
    outputFile.write("%s -> %s\n"%(dir,dirname))

  elif runtype =='crosscommon':
    os.chdir('/mvista/arch/%s/updates' % (dir))
    print 'making %s in %s/updates...' % (dirname,dir)
    os.system('mkdir -p %s' % (dirname))
    os.chdir(dirname)
    os.system('mkdir -p SRPMS' )
    os.system('cp -a %s/%s-%s-%s/SRPMS/*%s* SRPMS/' % (cpfrom,app,bug,id,version))
    for subd in dirs[dir][0]:
      os.system('cp -a %s/%s-%s-%s/%s .' % (cpfrom,app,bug,id,subd))
    updateManifest(dir, dirname)  
    validateManifest()
    outputFile.write("%s -> %s\n"%(dir,dirname))

  elif runtype == 'cross_onehost':
    if hosttype in dirs[dir][1]:
      os.chdir('/mvista/arch/%s/updates' % (dir))
      print 'making %s in %s/updates...' % (dirname,dir)
      os.system('mkdir -p %s' % (dirname))
      os.chdir(dirname)
      os.system('mkdir -p SRPMS' )
      os.system('cp -a %s/%s-%s-%s/SRPMS/*%s* SRPMS/' % (cpfrom,app,bug,id,version))
      for subd in dirs[dir][0]:
        os.system('mkdir -p %s/cross' % (subd))
        os.system('cp -a %s/%s-%s-%s/%s/cross/%s ./%s/cross/' % (cpfrom,app,bug,id,subd,hosttype,subd))
      updateManifest(dir, dirname)  
      validateManifest()
      outputFile.write("%s -> %s\n"%(dir,dirname))

  elif runtype == 'hostcopy':
    os.chdir('/mvista/arch/%s/updates' % (dir))
    os.system('mkdir -p %s/host' % (dirname))
    os.chdir(dirname)
    print 'Currently in %s...' % (dir)
    os.system('cp -a %s/%s-%s-%s/SRPMS .' % (cpfrom,app,bug,id))
    for subd in dirs[dir][1]:
      if len(os.listdir('%s/%s-%s-%s/host/%s'%(cpfrom,app,bug,id,subd))) > 0: #the app built for particular host, no empty dirs
        os.system('cp -a %s/%s-%s-%s/host/%s host' % (cpfrom,app,bug,id,subd))
    #updateManifest(dir, dirname)  
    #validateManifest()
    #outputFile.write("%s -> %s\n"%(dir,dirname))

  elif runtype == 'host_onehost':
    if hosttype in dirs[dir][1]:
      os.chdir('/mvista/arch/%s/updates' % (dir))
      os.system('mkdir -p %s/host' % (dirname))
      os.chdir(dirname)
      print 'Currently in %s...' % (dir)
      os.system('cp -a %s/%s-%s-%s/SRPMS .' % (cpfrom,app,bug,id))
      if len(os.listdir('%s/%s-%s-%s/host/%s'%(cpfrom,app,bug,id,hosttype))) > 0: #the app built for particular host, no empty dirs
        os.system('cp -a %s/%s-%s-%s/host/%s host' % (cpfrom,app,bug,id,hosttype))
        updateManifest(dir, dirname)  
        validateManifest()
        outputFile.write("%s -> %s\n"%(dir,dirname))

  elif runtype == 'host-toolcopy':
    if 'solaris8' in dirs[dir][1]: #this is a hack and should change
      print 'making %s in %s/updates...' % (dirname,dir)
      os.chdir('/mvista/arch/%s/updates' % (dir))
      os.system('mkdir -p %s' % (dirname))
      os.chdir(dirname)
      os.system('cp -a %s/%s-%s-%s/SRPMS .' % (cpfrom,app,bug,id))
      os.system('cp -a %s/%s-%s-%s/host-tools .' % (cpfrom,app,bug,id))
      updateManifest(dir, dirname)  
      validateManifest()
      outputFile.write("%s -> %s\n"%(dir,dirname))

  else:
    print "Invalid operation"
    sys.exit(1)


  os.chdir(cd)

