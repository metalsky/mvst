#
# Sample configuration file for ISC dhcpd for Debian
#
# $Id: dhcpd.conf,v 1.1 2006/12/28 22:22:40 build Exp $
#

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style none;
deny unknown-clients;
use-host-decl-names on;

# option definitions common to all supported networks...
subnet 10.23.5.0 netmask 255.255.255.0 {
  option routers 10.23.5.254;
  option domain-name "borg.mvista.com";
  option domain-name-servers 10.23.5.1, 10.23.5.2;
  server-name glue;
  next-server glue;
  filename "pxelinux.0";

}

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
#authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
#log-facility local7;

#64Bit
host node-1  {hardware ethernet 00:30:48:57:4D:78;fixed-address node-1;}
host node-2  {hardware ethernet 00:30:48:57:4D:38;fixed-address node-2;}
host node-3  {hardware ethernet 00:30:48:57:4C:08;fixed-address node-3;} #29
host node-4  {hardware ethernet 00:30:48:57:4E:00;fixed-address node-4;} #41
host node-5  {hardware ethernet 00:30:48:57:4E:08;fixed-address node-5;}
#host node-6  {hardware ethernet 00:30:48:77:A9:0A;fixed-address node-6;}
host node-7  {hardware ethernet 00:30:48:57:4C:CE;fixed-address node-7;}
#host node-8  {hardware ethernet 00:30:48:57:4D:4A;fixed-address node-8;}
#32Bit - Reversing node order: fastest first
host node-9 {hardware ethernet 00:30:48:2B:EC:9F;fixed-address node-9;} #node-39
host node-10  {hardware ethernet 00:30:48:2B:EC:CF;fixed-address node-10;} #node-40
host node-11 {hardware ethernet 00:30:48:2A:CF:9B;fixed-address node-11;}
host node-12 {hardware ethernet 00:30:48:2A:CF:7B;fixed-address node-12;}
host node-13 {hardware ethernet 00:30:48:2A:CF:F5;fixed-address node-13;}
host node-14 {hardware ethernet 00:30:48:2A:CF:C9;fixed-address node-14;} #node-35
host node-15 {hardware ethernet 00:30:48:2A:CF:51;fixed-address node-15;}
host node-16 {hardware ethernet 00:30:48:2A:D0:05;fixed-address node-16;}
host node-17 {hardware ethernet 00:30:48:2A:CF:7D;fixed-address node-17;}
host node-18 {hardware ethernet 00:30:48:2A:CF:0D;fixed-address node-18;}
host node-19 {hardware ethernet 00:30:48:2B:EC:DA;fixed-address node-19;} #node-30 - dumbo
#host node-20 {hardware ethernet ;fixed-address node-20;} #dead
#host node-21 {hardware ethernet ;fixed-address node-21;} # glue - change later
host node-22 {hardware ethernet 00:30:48:24:AB:9D;fixed-address node-22;} #Change to node-22
host node-23 {hardware ethernet 00:30:48:24:AA:AE;fixed-address node-23;}
host node-24 {hardware ethernet 00:30:48:24:A9:92;fixed-address node-24;}
host node-25 {hardware ethernet 00:30:48:24:93:37;fixed-address node-25;}
host node-26 {hardware ethernet 00:30:48:24:C4:55;fixed-address node-26;}
host node-27 {hardware ethernet 00:30:48:24:C4:63;fixed-address node-27;}
host node-28 {hardware ethernet 00:30:48:23:FB:82;fixed-address node-28;}
host node-29 {hardware ethernet 00:30:48:24:95:20;fixed-address node-29;} #node-20
host node-30 {hardware ethernet 00:30:48:24:AA:D8;fixed-address node-30;}
host node-31 {hardware ethernet 00:30:48:24:AA:B4;fixed-address node-31;} #node-18
host node-32 {hardware ethernet 00:30:48:23:BB:36;fixed-address node-32;}
host node-33 {hardware ethernet 00:30:48:23:FD:34;fixed-address node-33;}
host node-34 {hardware ethernet 00:30:48:23:BE:02;fixed-address node-34;}
host node-35 {hardware ethernet 00:30:48:24:0F:24;fixed-address node-35;}
host node-36 {hardware ethernet 00:30:48:23:BD:46;fixed-address node-36;}
host node-37 {hardware ethernet 00:30:48:23:BB:85;fixed-address node-37;}
host node-38 {hardware ethernet 00:30:48:23:BC:52;fixed-address node-38;}
host node-39 {hardware ethernet 00:30:48:23:BC:2C;fixed-address node-39;}
host node-40 {hardware ethernet 00:30:48:23:BE:D8;fixed-address node-40;}
#host node-41 {hardware ethernet 00:30:48:23:BB:89;fixed-address node-41;} #node-8
#host node-42 {hardware ethernet ;fixed-address node-42;} #node-6



#Shit that needs to change below here

host node-45 {hardware ethernet 00:30:48:57:4D:4A; fixed-address node-45;}


# No service will be given on this subnet, but declaring it helps the 
# DHCP server to understand the network topology.

#subnet 10.152.187.0 netmask 255.255.255.0 {
#}

# This is a very basic subnet declaration.

#subnet 10.254.239.0 netmask 255.255.255.224 {
#  range 10.254.239.10 10.254.239.20;
#  option routers rtr-239-0-1.example.org, rtr-239-0-2.example.org;
#}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.example.org;
#}

# A slightly different configuration for an internal subnet.
#subnet 10.5.5.0 netmask 255.255.255.224 {
#  range 10.5.5.26 10.5.5.30;
#  option domain-name-servers ns1.internal.example.org;
#  option domain-name "internal.example.org";
#  option routers 10.5.5.1;
#  option broadcast-address 10.5.5.31;
#  default-lease-time 600;
#  max-lease-time 7200;
#}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.

#host passacaglia {
#  hardware ethernet 0:0:c0:5d:bd:95;
#  filename "vmunix.passacaglia";
#  server-name "toccata.fugue.com";
#}

# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
#host fantasia {
#  hardware ethernet 08:00:07:26:c0:a5;
#  fixed-address fantasia.fugue.com;
#}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}
